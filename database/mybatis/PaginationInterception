//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package com.cld.database.interception;

import com.cld.database.dialect.Dialect;
import com.cld.database.dialect.MysqlDialect;
import com.cld.database.dialect.Dialect.Type;
import com.cld.infra.component.Page;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Properties;
import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.binding.MapperMethod.ParamMap;
import org.apache.ibatis.executor.ErrorContext;
import org.apache.ibatis.executor.ExecutorException;
import org.apache.ibatis.executor.statement.RoutingStatementHandler;
import org.apache.ibatis.executor.statement.StatementHandler;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.mapping.ParameterMode;
import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.plugin.Intercepts;
import org.apache.ibatis.plugin.Invocation;
import org.apache.ibatis.plugin.Plugin;
import org.apache.ibatis.plugin.Signature;
import org.apache.ibatis.reflection.MetaObject;
import org.apache.ibatis.reflection.property.PropertyTokenizer;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.type.TypeHandler;
import org.apache.ibatis.type.TypeHandlerRegistry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Intercepts({@Signature(
    type = StatementHandler.class,
    method = "prepare",
    args = {Connection.class}
)})
public class PaginationInterception implements Interceptor {
    protected static final String PROCESS_PAGE_BEGIN = "Process Page Begin...";
    protected static final String PROCESS_PAGE_END = "process Page end ==> ";
    protected static final String PROCESS_PAGE_TIME_UNIT = " ms";
    private static Logger logger = LoggerFactory.getLogger(PaginationInterception.class);

    public PaginationInterception() {
    }

    public Object intercept(Invocation invocation) throws Throwable {
        long startTime = System.currentTimeMillis();
        String logPrefix = "";
        boolean isPrint = false;
        RoutingStatementHandler handler = (RoutingStatementHandler)invocation.getTarget();
        StatementHandler delegate = (StatementHandler)PaginationInterception.ReflectUtil.getFieldValue(handler, "delegate");
        MappedStatement mappedStatement = (MappedStatement)PaginationInterception.ReflectUtil.getFieldValue(delegate, "mappedStatement");
        String classPath = mappedStatement.getId().trim().substring(0, mappedStatement.getId().trim().lastIndexOf("."));
        Logger myLog = LoggerFactory.getLogger(Class.forName(classPath));
        BoundSql boundSql = delegate.getBoundSql();
        Object temp = boundSql.getParameterObject();
        if (temp instanceof ParamMap) {
            logPrefix = RepositoryInterception.getPrefix(temp, myLog);
            ParamMap<Object> paramMap = (ParamMap)temp;
            if (paramMap.containsKey("page") && paramMap.get("page") != null) {
                isPrint = true;
                myLog.info(logPrefix + "Process Page Begin...");
                Page page = (Page)paramMap.get("page");
                Configuration configuration = (Configuration)PaginationInterception.ReflectUtil.getFieldValue(delegate, "configuration");
                if (page.getCount() == 0 && page.getReturnCount()) {
                    Connection connection = (Connection)invocation.getArgs()[0];
                    this.totalCount(connection, boundSql, configuration, mappedStatement, page, myLog, logPrefix);
                }

                PaginationInterception.ReflectUtil.setFieldValue(boundSql, "sql", this.searchDialectByDbTypeEnum(configuration, page).spellPageSql(boundSql.getSql(), page.getOffset(), page.getPageSize()));
                myLog.info(logPrefix + " 获得总条数为:" + page.getCount());
                myLog.info(logPrefix + "process Page end ==> " + " 总共执行了：" + (System.currentTimeMillis() - startTime) + " ms");
            }
        }

        Object object = invocation.proceed();
        if (isPrint) {
            myLog.info(logPrefix + "process Page end ==> " + " 总共执行了：" + (System.currentTimeMillis() - startTime) + " ms");
        }

        return object;
    }

    private void totalCount(Connection conn, BoundSql orgBoundSql, Configuration configuration, MappedStatement mappedStatement, Page page, Logger myLog, String logPrefix) throws SQLException {
        int totalCount = 0;
        String countSpellSql = this.searchDialectByDbTypeEnum(configuration, page).getCountSql(orgBoundSql.getSql());
        PreparedStatement preparedStatement = conn.prepareStatement(countSpellSql);
        Object parameterObject = orgBoundSql.getParameterObject();
        BoundSql boundSql = new BoundSql(configuration, countSpellSql, orgBoundSql.getParameterMappings(), parameterObject);
        this.setParameters(preparedStatement, mappedStatement, boundSql, parameterObject);
        myLog.info(logPrefix + "execute sql : [ " + RepositoryInterception.showSql(configuration, boundSql) + " ]");
        ResultSet rs = preparedStatement.executeQuery();

        try {
            if (rs != null && rs.next()) {
                totalCount = rs.getInt(1);
            }
        } finally {
            if (!rs.isClosed()) {
                rs.close();
            }

        }

        page.setCount(totalCount);
    }

    private void setParameters(PreparedStatement ps, MappedStatement mappedStatement, BoundSql boundSql, Object parameterObject) throws SQLException {
        ErrorContext.instance().activity("setting parameters").object(mappedStatement.getParameterMap().getId());
        List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();
        if (parameterMappings != null) {
            Configuration configuration = mappedStatement.getConfiguration();
            TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();
            MetaObject metaObject = parameterObject == null ? null : configuration.newMetaObject(parameterObject);

            for(int i = 0; i < parameterMappings.size(); ++i) {
                ParameterMapping parameterMapping = (ParameterMapping)parameterMappings.get(i);
                if (parameterMapping.getMode() != ParameterMode.OUT) {
                    String propertyName = parameterMapping.getProperty();
                    PropertyTokenizer prop = new PropertyTokenizer(propertyName);
                    Object value;
                    if (parameterObject == null) {
                        value = null;
                    } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {
                        value = parameterObject;
                    } else if (boundSql.hasAdditionalParameter(propertyName)) {
                        value = boundSql.getAdditionalParameter(propertyName);
                    } else if (propertyName.startsWith("__frch_") && boundSql.hasAdditionalParameter(prop.getName())) {
                        value = boundSql.getAdditionalParameter(prop.getName());
                        if (value != null) {
                            value = configuration.newMetaObject(value).getValue(propertyName.substring(prop.getName().length()));
                        }
                    } else {
                        value = metaObject == null ? null : metaObject.getValue(propertyName);
                    }

                    TypeHandler typeHandler = parameterMapping.getTypeHandler();
                    if (typeHandler == null) {
                        throw new ExecutorException("There was no TypeHandler found for parameter " + propertyName + " of statement " + mappedStatement.getId());
                    }

                    typeHandler.setParameter(ps, i + 1, value, parameterMapping.getJdbcType());
                }
            }

        }
    }

    private Dialect searchDialectByDbTypeEnum(Configuration configuration, Page page) {
        Dialect dialect = null;
        switch(this.searchDbTypeByConfig(configuration)) {
        case MYSQL:
            dialect = new MysqlDialect(page.getOrderBy());
        case SQLSERVER:
        case DB2:
        default:
            return dialect;
        }
    }

    private Type searchDbTypeByConfig(Configuration configuration) {
        String dialectConfig = configuration.getVariables().getProperty("sqlType");
        if (StringUtils.isNotEmpty(dialectConfig)) {
            return Type.valueOf(dialectConfig.toUpperCase());
        } else {
            throw new RuntimeException("databaseType is null , please check your mybatis configuration!");
        }
    }

    public Object plugin(Object target) {
        return Plugin.wrap(target, this);
    }

    public void setProperties(Properties properties) {
    }

    protected static class ReflectUtil {
        protected ReflectUtil() {
        }

        public static Object getFieldValue(Object obj, String fieldName) {
            Object result = null;
            Field field = getField(obj, fieldName);
            if (field != null) {
                field.setAccessible(true);

                try {
                    result = field.get(obj);
                } catch (IllegalArgumentException var5) {
                    ;
                } catch (IllegalAccessException var6) {
                    ;
                }
            }

            return result;
        }

        private static Field getField(Object obj, String fieldName) {
            Field field = null;
            Class clazz = obj.getClass();

            while(clazz != Object.class) {
                try {
                    field = clazz.getDeclaredField(fieldName);
                    break;
                } catch (NoSuchFieldException var5) {
                    clazz = clazz.getSuperclass();
                }
            }

            return field;
        }

        public static void setFieldValue(Object obj, String fieldName, String fieldValue) {
            Field field = getField(obj, fieldName);
            if (field != null) {
                try {
                    field.setAccessible(true);
                    field.set(obj, fieldValue);
                } catch (IllegalArgumentException var5) {
                    PaginationInterception.logger.error("发生错误:" + var5.getMessage());
                    throw new ExecutorException(var5);
                } catch (IllegalAccessException var6) {
                    PaginationInterception.logger.error("发生错误:" + var6.getMessage());
                    throw new ExecutorException(var6);
                }
            }

        }
    }
}
